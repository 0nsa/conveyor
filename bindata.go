// Code generated by go-bindata.
// sources:
// db/migrations/1_initial_schema.sql
// DO NOT EDIT!

package conveyor

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x3d\x8f\x9b\x40\x10\xed\xf9\x15\x4f\xd7\x80\x95\x38\x51\xa4\x74\x56\x0a\x27\xde\x4b\x90\x2c\x9c\xd8\xa0\xbb\x0e\xad\x61\x0c\xab\xc0\x2e\xd9\x0f\x3b\xe4\xd7\x67\x0d\xd8\x77\xba\x14\x2e\x72\xdd\xf0\x76\x66\xde\x9b\x37\xc3\x7c\x8e\x37\xad\xa8\x34\xb7\x84\xac\x0b\xbe\x6c\xd9\x32\x65\x60\x8f\x29\x4b\x76\xf1\x26\x41\x7c\x8f\x64\x93\x7a\x20\xde\xa5\x3b\xd4\xc6\x2a\x4d\x8b\x5b\x69\x77\xce\x89\x72\xae\x8c\xe9\xee\x16\xc1\x25\x39\x5d\x7e\x5e\x33\xec\x9d\x68\x4a\x83\x28\x00\x44\x89\x73\xde\x50\x98\x64\xeb\x35\x56\xec\x7e\x99\xad\xd3\x01\xcd\x2b\x92\x74\x56\x95\x1f\x3f\x46\x33\x74\x5a\xb4\x5c\xf7\xf8\x49\xfd\x5b\x5f\xaa\xa9\x53\x46\x78\x2d\x3d\x2c\xfd\xb6\x67\x68\xaf\xb9\x2c\xea\xeb\xa7\xa9\xf9\x53\x6c\xb9\x75\xe6\xfa\x59\x68\xf2\x7d\xcb\x9c\x5b\x58\xd1\x92\x7f\x6d\x3b\x9c\x84\xad\x95\x1b\x11\xfc\x51\x92\x50\xd2\x81\xbb\xc6\x22\x92\xea\xe4\x15\xf0\xe7\x6f\xa1\xb3\x45\x38\x9b\x7a\xeb\xdb\xcd\x06\x5a\xd5\x76\x0d\xdd\xce\x0d\x66\x2f\x3d\xf3\x0c\xe2\xc0\x0b\xfb\xdf\xb6\x0d\xe6\xe7\xff\x34\xd0\x74\x20\x4d\xb2\x20\x33\xad\x27\x12\xe5\x30\x9c\x2f\xae\xe8\xf5\x7d\x1b\x26\xf4\x87\xf7\x40\x7e\x4d\xca\x35\x25\x48\x1a\xa7\x3d\x53\xed\xb3\x4f\x04\x25\x9b\x1e\x35\x3f\x12\x3e\xa0\x23\x59\x0a\x59\xbd\x1f\x94\xf9\x60\x94\x88\x83\xd2\xe0\xb2\x47\x25\x8e\x24\xcf\xdb\x7e\x77\xf1\x2c\x4b\xe2\x1f\x19\x43\x9c\xac\xd8\x23\x9c\x14\xbf\x1c\xe5\x63\x8d\xbf\xd3\xe9\xfc\xb2\x5d\x9c\x7c\xc5\xde\x6a\x22\x44\xbe\x78\x86\x87\x6f\x6c\xcb\x7c\x3c\x9e\xca\x27\x84\x17\xbe\x10\x9b\x2d\x9e\xe0\x49\x4e\x38\x8d\x70\xfd\x77\x56\xea\x24\x83\xd5\x76\xf3\xfd\xe5\xce\x16\xcf\xd1\x91\x7e\x11\xfc\x0d\x00\x00\xff\xff\x57\x91\x3f\x0f\x76\x03\x00\x00")

func dbMigrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1_initial_schemaSql,
		"db/migrations/1_initial_schema.sql",
	)
}

func dbMigrations1_initial_schemaSql() (*asset, error) {
	bytes, err := dbMigrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1_initial_schema.sql", size: 886, mode: os.FileMode(420), modTime: time.Unix(1453782744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/1_initial_schema.sql": dbMigrations1_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial_schema.sql": &bintree{dbMigrations1_initial_schemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

