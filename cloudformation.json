{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Conveyor Docker build system",

  "Parameters": {
    "GitHubSecret": {
      "Type": "String",
      "Default": "",
      "Description": "The shared secret that GitHub uses to sign webhook payloads."
    },
    "GitHubToken": {
      "Type": "String",
      "Default": "",
      "Description": "GitHub API token to use when creating commit statuses."
    },
    "AllowedCIDR": {
      "Type": "String",
      "Default": "",
      "Description": "CIDR address to allow SSH access into hosts."
    },
    "Bucket": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket where ssh keys are located."
    },
    "BuilderImage": {
      "Type": "String",
      "Default": "remind101/conveyor-builder",
      "Description": "Docker image to use to perform the build."
    },
    "DryRun": {
      "Type": "Number",
      "Default": "0",
      "Description": "Set to 1 to enable dry run mode.",
      "MinValue": "0",
      "MaxValue": "1"
    },
    "Reporter": {
      "Type": "String",
      "Default": "",
      "Description": "A Reporter to use to report errors. Default is to write errors to stderr."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [ "t2.small","t2.medium","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "AmiId" : {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AMI Id. Defaults to the official ECS Optimized Linux.",
      "Default": "ami-e1c33f8a"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The name of the key pair to use to allow SSH access."
    },
    "DockerCfg": {
      "Type": "String",
      "Description": "Contents of a .dockercfg file.",
      "Default": ""
    },
    "MaxCapacity": {
      "Type": "String",
      "Description": "Maximum number of EC2 instances in the auto scaling group",
      "Default": "5"
    },
    "DesiredCapacity": {
      "Type": "String",
      "Description": "Desired number of EC2 instances in the auto scaling group",
      "Default": "3"
    },
    "AvailabilityZones": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "Comma delimited list of availability zones. MAX 2",
      "Default": "us-east-1a,us-east-1b"
    }
  },

  "Resources": {

    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },

    "PubSubnetAz1" : {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": { "Ref" : "Vpc" },
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["0", { "Ref": "AvailabilityZones" }]
        }
      }
    },

    "PubSubnetAz2" : {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "AttachGateway",
      "Properties": {
        "VpcId": { "Ref" : "Vpc" },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": ["1", { "Ref": "AvailabilityZones" }]
        }
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "Vpc" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },

    "PublicRouteViaIgw": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "RouteViaIgw" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PubSubnetAz1" },
        "RouteTableId": { "Ref": "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PubSubnetAz2" },
        "RouteTableId": { "Ref": "RouteViaIgw" }
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Container Instance Allowed Ports",
        "VpcId": { "Ref": "Vpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22",
            "CidrIp": { "Ref": "AllowedCIDR" }
          },
          {
            "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" }
          }
        ]
      }
    },

    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Container Instance Allowed Ports",
        "VpcId": { "Ref": "Vpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80",
            "CidrIp": "192.30.252.0/22"
          },
          {
            "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80",
            "CidrIp": { "Ref": "AllowedCIDR" }
          }
        ]
      }
    },

    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "AttachGateway",
      "Properties": {
        "SecurityGroups": [
          { "Ref": "LoadBalancerSecurityGroup" }
        ],
        "Subnets": [
          { "Ref": "PubSubnetAz1" },
          { "Ref": "PubSubnetAz2" }
        ],
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8080",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:8080",
          "HealthyThreshold": "10",
          "UnhealthyThreshold": "2",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },

    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      }
    },

    "InstancePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ecs",
        "Roles": [ { "Ref": "InstanceRole" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*",
                "elasticloadbalancing:*",
                "ecs:*",
                "iam:ListInstanceProfiles",
                "iam:ListRoles",
                "iam:PassRole",
                "iam:UploadServerCertificate",
                "iam:DeleteServerCertificate",
                "route53:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "Bucket" }, "/*"]] }
            }
          ]
        }
      }
    },

    "ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ecs.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      }
    },

    "ServiceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ecsServiceRole",
        "Roles": [ { "Ref": "ServiceRole" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*",
                "elasticloadbalancing:*",
                "ecs:*",
                "iam:ListInstanceProfiles",
                "iam:ListRoles",
                "iam:PassRole",
                "route53:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },

    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "InstanceRole" } ]
      }
    },

    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "Cluster",
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "roleName": { "Ref": "InstanceRole" },
            "buckets": { "Ref": "Bucket" }
          }
        },
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/ecs/ecs.config": {
                "content": { "Fn::Join": ["", [
                  "ECS_CLUSTER=", { "Ref": "Cluster" }, "\n",
                  "ECS_ENGINE_AUTH_TYPE=dockercfg\n",
                  "ECS_ENGINE_AUTH_DATA=", { "Ref": "DockerCfg" }, "\n"
                ]] },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/home/ec2-user/.dockercfg": {
                "content": { "Ref": "DockerCfg" },
                "mode": "000600",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/root/.dockercfg": {
                "content": { "Ref": "DockerCfg" },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/var/run/conveyor/.dockercfg": {
                "content": { "Ref": "DockerCfg" },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/var/run/conveyor/.ssh/id_rsa": {
                "source": { "Fn::Join": ["", ["http://s3.amazonaws.com/", { "Ref": "Bucket" }, "/id_rsa"]] },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/var/run/conveyor/.ssh/id_rsa.pub": {
                "source": { "Fn::Join": ["", ["http://s3.amazonaws.com/", { "Ref": "Bucket" }, "/id_rsa.pub"]] },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [
          { "Ref": "InstanceSecurityGroup" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "mkdir -p /var/run/conveyor/.ssh\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackName" }, " -r LaunchConfiguration --region ", { "Ref": "AWS::Region" }, "\n",
                "docker pull ", { "Ref": "BuilderImage" }, "\n",
                "docker create --name data -v /var/run/conveyor:/var/run/conveyor:ro ubuntu:14.04\n"
              ]
            ]
          }
        }
      }
    },

    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Ref": "AvailabilityZones" },
        "VPCZoneIdentifier": [{ "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] }],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "1",
        "MaxSize": { "Ref": "MaxCapacity" },
        "DesiredCapacity": { "Ref": "DesiredCapacity" }
      }
    },

    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "conveyor",
            "Image": "remind101/conveyor:latest",
            "Cpu": 512,
            "Memory": 256,
            "EntryPoint": [],
            "Environment": [
              {
                "Name": "GITHUB_TOKEN",
                "Value": { "Ref": "GitHubToken" }
              },
              {
                "Name": "GITHUB_SECRET",
                "Value": { "Ref": "GitHubSecret" }
              },
              {
                "Name": "LOGGER",
                "Value": { "Fn::Join": ["", ["s3://", { "Ref": "Bucket" }]] }
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref": "AWS::Region" }
              },
              {
                "Name": "DRY",
                "Value": { "Ref": "DryRun" }
              },
              {
                "Name": "REPORTER",
                "Value": { "Ref": "Reporter" }
              }
            ],
            "PortMappings": [
              {
                "HostPort": 8080,
                "ContainerPort": 8080
              }
            ],
            "VolumesFrom": [],
            "MountPoints": [
              {
                "SourceVolume": "dockerSocket",
                "ContainerPath": "/var/run/docker.sock",
                "ReadOnly": false
              }
            ],
            "Essential": true
          }
        ],
        "Volumes": [
          {
            "Name": "dockerSocket",
            "Host": {
              "SourcePath": "/var/run/docker.sock"
            }
          }
        ]
      }
    },

    "Service": {
      "Type" : "AWS::ECS::Service",
      "DependsOn": ["Cluster","ServiceRole","ServiceRolePolicies"],
      "Properties" : {
        "Cluster" : { "Ref": "Cluster" },
        "DesiredCount" : 1,
        "LoadBalancers" : [
          {
            "ContainerName": "conveyor",
            "ContainerPort": 8080,
            "LoadBalancerName": { "Ref": "LoadBalancer" }
          }
        ],
        "Role" : { "Ref": "ServiceRole" },
        "TaskDefinition" : { "Ref": "TaskDefinition" }
      }
    }
  }
}
